// This is only going to work for the 2020-2021 school year, probably

import fetch from 'node-fetch'
import cheerio from 'cheerio'
import fs from 'fs/promises'
import { fileURLToPath } from 'url'

import { ImgurUrlManager } from './get-clubs-gdrive-thumbnails.js'

const spreadsheetUrl =
  'https://docs.google.com/spreadsheets/u/1/d/1HUaNWegOIk972lGweoSuNcXtfX7XuGBTQU-gcTsvD9s/pub'

// Spreadsheet name -> (probably correct) Google Doc name (from clubs-links)
const clubRenaming = {
  'Rubiks Cube Club': "Rubik's Cube Club",
  'Cash Club Corp Gunn': 'Cash Club Corp',
  'Competative Programming Club': 'Competitive Programming Club',
  'March For Our Lives': 'March for Our Lives',
  'Political and Civil Discourse Club': 'Civil and Political Discourse'
}

// The Muse didn't insert a space
// "signup": "https://forms.gle/AfVsyUTeDmRtX8pi7https://forms.gle/AfVsyUTeDmRtX8pi7",
// grrr
function cleanLinks (rawLink) {
  if (!rawLink) return rawLink
  // Assuming that all the links here use https://
  rawLink = rawLink.replace(/(\S)(https?:\/\/)/g, '$1 $2').split('?fbclid=')[0]
  if (!rawLink.startsWith('http')) rawLink = 'https://' + rawLink
  return rawLink
}

async function main () {
  const imgurUrls = new ImgurUrlManager()

  // Generated by update-clubs-links.js
  const inputPath = fileURLToPath(
    new URL('../json/clubs-links.json', import.meta.url)
  )
  const links = await fs
    .readFile(inputPath, 'utf-8')
    .then(JSON.parse)
    .catch(() => ({}))

  const html = await fetch(spreadsheetUrl).then(r => r.text())
  const $ = cheerio.load(html, { xmlMode: false })

  const clubs = {}

  $('table tbody tr:not(:first-child)').each(function () {
    // The first <td> is invisible for some reason
    const [
      ,
      newness,
      lisaHallName,
      tierText,
      desc,
      day,
      time,
      link,
      president,
      teacher,
      email,
      coteacher,
      coemail
    ] = $(this)
      .children()
      .map(function () {
        return (
          $(this)
            .text()
            .trim()
            // Replace nbsp with space
            .replace(/\xa0/g, ' ')
        )
      })
      .get()
      // If it's empty, return `undefined` so that it's omitted from the JSON
      .map(str => str || undefined)

    if (!lisaHallName) return

    const name = clubRenaming[lisaHallName] || lisaHallName

    const tierMatch = /TIER ([123]) CLUB/.exec(tierText)
    if (!tierMatch) {
      console.warn('Could not determine tier from', tierText, name)
    }
    const tier = tierMatch ? +tierMatch[1] : undefined

    if (newness !== 'NEW THIS YEAR!' && newness !== 'Returning') {
      console.warn(newness, 'is not NEW... or Returning', name)
    }

    const noSecondsTime = time.replace(':00', '')

    const { video, zoom, time: time2, president: president2, signup } =
      links[name] || {}
    const actualTime2 =
      time2 &&
      time2.replace(/(MON|TUES|WED|THURS|FRI)(\/(MON|TUES|WED|THURS|FRI))?/, '')
    if (links[name]) {
      if (president !== president2) {
        console.warn(president, 'is not the same PRESIDENT as', president2)
      }
      if (noSecondsTime !== actualTime2) {
        console.warn(time, 'is not the same TIME as', time2)
      }
      if (link && link !== zoom) {
        console.warn(link, 'is not the same ZOOM LINK as', zoom)
      }
      delete links[name]
    }

    clubs[name] = {
      new: newness.includes('NEW'),
      desc,
      day,
      // Will assume that the document is generally more accurate than Lisa
      // Hall's spreadsheet (not always the case though, as someone put "11:40
      // PM" for their time on the document)
      // Edit 2021-01-29: The spreadsheet now seems more up-to-date.
      time: noSecondsTime || actualTime2,
      link: cleanLinks(link || zoom),
      video: cleanLinks(video),
      signup:
        signup === 'Contact club president to Join'
          ? undefined
          : cleanLinks(signup),
      tier,
      president,
      coteacher,
      coemail,
      teacher,
      email
    }
  })

  for (const club of Object.values(clubs)) {
    if (club.video?.includes('tinyurl.com')) {
      // Follow redirect
      const { headers } = await fetch(club.video, { redirect: 'manual' })
      const redirect = headers.get('location')
      if (redirect) {
        club.video = redirect
      } else {
        console.log('[??]', headers)
      }
    }
    await imgurUrls.setThumbnailIfNeeded(club)
  }
  await imgurUrls.save()

  // Overrides for Zoom links
  if (clubs['Cash Club Corp']) {
    clubs['Cash Club Corp'].link =
      'https://us04web.zoom.us/j/4035403738?pwd=R2FtWFFZSHVHbWpHcFRzd0t1ME4rZz09'
  }
  if (clubs['United Computations']) {
    clubs['United Computations'].link = 'https://pausd.zoom.us/j/91447696916'
  }

  const outputPath = fileURLToPath(
    new URL('../json/clubs.json', import.meta.url)
  )
  await fs.writeFile(outputPath, JSON.stringify(clubs, null, '\t') + '\n')

  if (Object.keys(links).length) {
    console.log('Not matched:', Object.keys(links))
  }
}
main()
